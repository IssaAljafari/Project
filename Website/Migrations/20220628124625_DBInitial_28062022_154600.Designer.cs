// <auto-generated />
using System;
using ClassLibrary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassLibrary.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20220628124625_DBInitial_28062022_154600")]
    partial class DBInitial_28062022_154600
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClassLibrary.Models.Dictionary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("Dictionary");
                });

            modelBuilder.Entity("ClassLibrary.Models.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRTL")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Short_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("ClassLibrary.Models.Miscellaneous", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("Miscellaneous");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionAssociation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BGImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionAssociation");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionAssociationCouncilWord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionAssociationCouncilWord");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionAssociationFooter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("GoalsTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MembersTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionAssociationFooter");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionAssociationMember", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DestinationURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionAssociationMember");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionCinemaLibraryFooter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("ArabCinemaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("WorldCinemaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionCinemaLibraryFooter");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionContact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BtnBackground")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BtnTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionContact");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionContactFooter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Evening")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Morning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionContactFooter");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionCurrentlyShowing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionCurrentlyShowing");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionCurrentlyShowingList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DestinationURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionCurrentlyShowingList");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionDivision", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BtnColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BtnTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MemberCounttitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionDivision");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionEvent");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionEventList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DestinationURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionEventList");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionFooter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionFooter");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionIntro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Button_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Destination_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionIntro");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionLatestNew", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionLatestNew");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionLatestNewList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DestinationURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionLatestNewList");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionLatestService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionLatestService");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionLatestServiceList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DestinationURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionLatestServiceList");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DestinationURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionService");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionVisiblity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreationUserID");

                    b.HasIndex("DeleteUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("SectionVisiblity");
                });

            modelBuilder.Entity("ClassLibrary.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ClassLibrary.Models.Dictionary", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("Dictionary_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_Dictionary");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("Dictionary_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_Dictionary");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("Dictionary_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_Dictionary");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.Language", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("Language_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_Language");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("Language_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_Language");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("Language_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_Language");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.Miscellaneous", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("Miscellaneous_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_Miscellaneous");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("Miscellaneous_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_Miscellaneous");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("Miscellaneous_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_Miscellaneous");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionAssociation", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("Guild_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_Guild");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("Guild_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_Guild");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("Guild_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_Guild");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionAssociationCouncilWord", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("SyndicateCouncilWord_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_SyndicateCouncilWord");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("SyndicateCouncilWord_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_SyndicateCouncilWord");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("SyndicateCouncilWord_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_SyndicateCouncilWord");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionAssociationFooter", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("GuildFooter_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_GuildFooter");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("GuildFooter_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_GuildFooter");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("GuildFooter_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_GuildFooter");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionAssociationMember", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("GuildMember_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_GuildMember");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("GuildMember_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_GuildMember");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("GuildMember_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_GuildMember");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionCinemaLibraryFooter", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("CinemaLibraryFooter_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_CinemaLibraryFooter");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("CinemaLibraryFooter_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_CinemaLibraryFooter");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("CinemaLibraryFooter_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_CinemaLibraryFooter");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionContact", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("Contact_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_Contact");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("Contact_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_Contact");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("Contact_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_Contact");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionContactFooter", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("ContactFooter_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_ContactFooter");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("ContactFooter_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_ContactFooter");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("ContactFooter_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_ContactFooter");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionCurrentlyShowing", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("CurrentlyShowing_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_CurrentlyShowing");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("CurrentlyShowing_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_CurrentlyShowing");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("CurrentlyShowing_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_CurrentlyShowing");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionCurrentlyShowingList", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("CurrentlyShowingList_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_CurrentlyShowingList");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("CurrentlyShowingList_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_CurrentlyShowingList");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("CurrentlyShowingList_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_CurrentlyShowingList");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionDivision", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("Division_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_Division");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("Division_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_Division");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("Division_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_Division");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionEvent", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("Event_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_Event");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("Event_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_Event");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("Event_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_Event");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionEventList", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("EventList_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_EventList");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("EventList_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_EventList");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("EventList_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_EventList");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionFooter", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("Footer_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_Footer");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("Footer_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_Footer");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("Footer_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_Footer");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionIntro", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("Intro_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_Intro");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("Intro_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_Intro");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("Intro_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_Intro");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionLatestNew", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("LatestNew_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_LatestNew");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("LatestNew_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_LatestNew");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("LatestNew_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_LatestNew");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionLatestNewList", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("LatestNewsList_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_LatestNewsList");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("LatestNewsList_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_LatestNewsList");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("LatestNewsList_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_LatestNewsList");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionLatestService", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("LatestService_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_LatestService");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("LatestService_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_LatestService");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("LatestService_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_LatestService");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionLatestServiceList", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("LatestServiceList_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_LatestServiceList");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("LatestServiceList_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_LatestServiceList");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("LatestServiceList_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_LatestServiceList");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionService", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("Service_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_Service");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("Service_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_Service");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("Service_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_Service");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.SectionVisiblity", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "CreationUser")
                        .WithMany("SectionVisiblity_CreationUsers")
                        .HasForeignKey("CreationUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreation_SectionVisiblity");

                    b.HasOne("ClassLibrary.Models.User", "DeleteUser")
                        .WithMany("SectionVisiblity_DeleteUsers")
                        .HasForeignKey("DeleteUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserDelete_SectionVisiblity");

                    b.HasOne("ClassLibrary.Models.User", "ModifyUser")
                        .WithMany("SectionVisiblity_ModifyUsers")
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_UserModify_SectionVisiblity");

                    b.Navigation("CreationUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("ClassLibrary.Models.User", b =>
                {
                    b.Navigation("CinemaLibraryFooter_CreationUsers");

                    b.Navigation("CinemaLibraryFooter_DeleteUsers");

                    b.Navigation("CinemaLibraryFooter_ModifyUsers");

                    b.Navigation("ContactFooter_CreationUsers");

                    b.Navigation("ContactFooter_DeleteUsers");

                    b.Navigation("ContactFooter_ModifyUsers");

                    b.Navigation("Contact_CreationUsers");

                    b.Navigation("Contact_DeleteUsers");

                    b.Navigation("Contact_ModifyUsers");

                    b.Navigation("CurrentlyShowingList_CreationUsers");

                    b.Navigation("CurrentlyShowingList_DeleteUsers");

                    b.Navigation("CurrentlyShowingList_ModifyUsers");

                    b.Navigation("CurrentlyShowing_CreationUsers");

                    b.Navigation("CurrentlyShowing_DeleteUsers");

                    b.Navigation("CurrentlyShowing_ModifyUsers");

                    b.Navigation("Dictionary_CreationUsers");

                    b.Navigation("Dictionary_DeleteUsers");

                    b.Navigation("Dictionary_ModifyUsers");

                    b.Navigation("Division_CreationUsers");

                    b.Navigation("Division_DeleteUsers");

                    b.Navigation("Division_ModifyUsers");

                    b.Navigation("EventList_CreationUsers");

                    b.Navigation("EventList_DeleteUsers");

                    b.Navigation("EventList_ModifyUsers");

                    b.Navigation("Event_CreationUsers");

                    b.Navigation("Event_DeleteUsers");

                    b.Navigation("Event_ModifyUsers");

                    b.Navigation("Footer_CreationUsers");

                    b.Navigation("Footer_DeleteUsers");

                    b.Navigation("Footer_ModifyUsers");

                    b.Navigation("GuildFooter_CreationUsers");

                    b.Navigation("GuildFooter_DeleteUsers");

                    b.Navigation("GuildFooter_ModifyUsers");

                    b.Navigation("GuildMember_CreationUsers");

                    b.Navigation("GuildMember_DeleteUsers");

                    b.Navigation("GuildMember_ModifyUsers");

                    b.Navigation("Guild_CreationUsers");

                    b.Navigation("Guild_DeleteUsers");

                    b.Navigation("Guild_ModifyUsers");

                    b.Navigation("Intro_CreationUsers");

                    b.Navigation("Intro_DeleteUsers");

                    b.Navigation("Intro_ModifyUsers");

                    b.Navigation("Language_CreationUsers");

                    b.Navigation("Language_DeleteUsers");

                    b.Navigation("Language_ModifyUsers");

                    b.Navigation("LatestNew_CreationUsers");

                    b.Navigation("LatestNew_DeleteUsers");

                    b.Navigation("LatestNew_ModifyUsers");

                    b.Navigation("LatestNewsList_CreationUsers");

                    b.Navigation("LatestNewsList_DeleteUsers");

                    b.Navigation("LatestNewsList_ModifyUsers");

                    b.Navigation("LatestServiceList_CreationUsers");

                    b.Navigation("LatestServiceList_DeleteUsers");

                    b.Navigation("LatestServiceList_ModifyUsers");

                    b.Navigation("LatestService_CreationUsers");

                    b.Navigation("LatestService_DeleteUsers");

                    b.Navigation("LatestService_ModifyUsers");

                    b.Navigation("Miscellaneous_CreationUsers");

                    b.Navigation("Miscellaneous_DeleteUsers");

                    b.Navigation("Miscellaneous_ModifyUsers");

                    b.Navigation("SectionVisiblity_CreationUsers");

                    b.Navigation("SectionVisiblity_DeleteUsers");

                    b.Navigation("SectionVisiblity_ModifyUsers");

                    b.Navigation("Service_CreationUsers");

                    b.Navigation("Service_DeleteUsers");

                    b.Navigation("Service_ModifyUsers");

                    b.Navigation("SyndicateCouncilWord_CreationUsers");

                    b.Navigation("SyndicateCouncilWord_DeleteUsers");

                    b.Navigation("SyndicateCouncilWord_ModifyUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
